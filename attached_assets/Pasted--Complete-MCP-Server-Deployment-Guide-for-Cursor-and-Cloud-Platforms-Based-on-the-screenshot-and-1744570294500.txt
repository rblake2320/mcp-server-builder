# Complete MCP Server Deployment Guide for Cursor and Cloud Platforms

Based on the screenshot and search results, here's a comprehensive guide for deploying MCP servers to Cursor IDE and various cloud platforms. I'll provide complete code examples for different implementation approaches.

## MCP Server Implementation Options

### 1. Node.js Implementation (Quickest Setup - 5 Minutes)

This approach uses the official MCP SDK for JavaScript/TypeScript:

```javascript
// index.js
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Create server instance
const server = new McpServer({
  name: "Custom MCP Server",
  version: "1.0.0"
});

// Define your tools
server.tool("add",
  { a: z.number(), b: z.number() },
  async ({ a, b }) => ({
    content: [{ type: "text", text: String(a + b) }]
  })
);

// Add more complex tools
server.tool("search_web",
  { query: z.string(), deep_search: z.boolean().optional() },
  async ({ query, deep_search = false }) => {
    // Implement web search logic here
    const results = `Search results for: ${query}`;
    return {
      content: [{ type: "text", text: results }]
    };
  }
);

// Start the server with stdio transport
const transport = new StdioServerTransport();
await server.connect(transport);
```

**Setup instructions:**
```bash
mkdir mcp-server
cd mcp-server
npm init -y
npm pkg set type=module
npm install @modelcontextprotocol/sdk
# Create index.js with the above code
```

### 2. Python Implementation (More Extensible)

```python
# server.py
import asyncio
from typing import Dict, Any, Optional
from fastmcp import FastMCP

# Initialize the MCP server
mcp = FastMCP('custom-mcp-server')

# Define a simple tool
@mcp.tool(
    name="calculate",
    description="Performs basic calculations",
    parameters={
        "operation": {"type": "string", "description": "The operation to perform (add, subtract, multiply, divide)"},
        "a": {"type": "number", "description": "First number"},
        "b": {"type": "number", "description": "Second number"}
    }
)
async def calculate(operation: str, a: float, b: float) -> Dict[str, Any]:
    results = None
    if operation == "add":
        results = a + b
    elif operation == "subtract":
        results = a - b
    elif operation == "multiply":
        results = a * b
    elif operation == "divide":
        results = a / b if b != 0 else "Cannot divide by zero"
    
    return {"result": str(results)}

# Define a web search tool
@mcp.tool(
    name="web_search",
    description="Search the web for information",
    parameters={
        "query": {"type": "string", "description": "The search query"},
        "deep_search": {"type": "boolean", "description": "Whether to perform a deep search", "optional": True}
    }
)
async def web_search(query: str, deep_search: Optional[bool] = False) -> Dict[str, Any]:
    # Implement web search logic here
    return {"results": f"Search results for: {query}"}

# Start the server
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(mcp.run())
```

**Setup instructions:**
```bash
pip install uv
uv venv
uv pip install fastmcp
# Create server.py with the above code
```

### 3. TypeScript with Compilation (Best for Production)

```typescript
// src/weather.ts
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

// Weather API key setup
const API_KEY = process.env.WEATHER_API_KEY || "";

const server = new McpServer({
  name: "Weather MCP Server",
  version: "1.0.0"
});

// Weather lookup tool
server.tool(
  "get_weather",
  {
    location: z.string().describe("City name or coordinates"),
    forecast: z.boolean().optional().describe("Get forecast instead of current weather")
  },
  async ({ location, forecast = false }) => {
    try {
      // Fetch weather data logic here
      const weatherData = `Weather for ${location}: Sunny, 72Â°F`;
      
      return {
        content: [{ type: "text", text: weatherData }]
      };
    } catch (error) {
      return {
        content: [{ type: "text", text: `Error fetching weather: ${error.message}` }]
      };
    }
  }
);

// Start the server
const transport = new StdioServerTransport();
console.log("Weather MCP Tool running on stdio");
await server.connect(transport);
```

**package.json configuration:**
```json
{
  "name": "mcp-weather",
  "type": "module",
  "scripts": {
    "build:weather": "bun build ./src/weather.ts --outdir ./bin --target bun",
    "watch:weather": "bun build ./src/weather.ts --outdir ./bin --target bun --watch"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.7.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "bun-types": "latest",
    "typescript": "^5.0.0"
  }
}
```

## Adding MCP Servers to Cursor IDE

### Method 1: Direct Configuration

```javascript
// In Cursor settings
{
  "mcpServers": {
    "custom-server": {
      "command": "node",
      "args": ["/absolute/path/to/your/index.js"]
    }
  }
}
```

### Method 2: For Python Servers

```javascript
// In Cursor settings
{
  "mcpServers": {
    "python-server": {
      "command": "uv",
      "args": ["--directory", "/path/to/server", "run", "server.py"]
    }
  }
}
```

### Method 3: For Compiled Binaries

```javascript
// In Cursor settings
{
  "mcpServers": {
    "weather-tool": {
      "command": "/absolute/path/to/bin/mcp-weather"
    }
  }
}
```

## Cloud Deployment Options

Based on the screenshot, here are code examples for deploying to various cloud platforms:

### 1. Vercel Deployment

Create a `vercel.json` file:

```json
{
  "version": 2,
  "builds": [
    {
      "src": "server.py",
      "use": "@vercel/python"
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "server.py"
    }
  ]
}
```

Modify your Python server to work with HTTP:

```python
# server_http.py
from fastapi import FastAPI
from fastmcp import FastMCP
from fastmcp.transports.http import HttpServerTransport

app = FastAPI()
mcp = FastMCP('custom-mcp-server')

# Define your tools here (same as before)
@mcp.tool(...)
async def calculate(...):
    ...

# Set up HTTP transport
transport = HttpServerTransport()
mcp.connect(transport)

# Add FastAPI routes
app.include_router(transport.router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
```

### 2. Railway Deployment

Create a `railway.json` file:

```json
{
  "schema": 2,
  "build": {
    "builder": "NIXPACKS",
    "buildCommand": "pip install -r requirements.txt"
  },
  "deploy": {
    "startCommand": "uvicorn server_http:app --host 0.0.0.0 --port $PORT",
    "healthcheckPath": "/health",
    "healthcheckTimeout": 100,
    "restartPolicyType": "ON_FAILURE"
  }
}
```

### 3. Netlify Deployment

Create a `netlify.toml` file:

```toml
[build]
  command = "pip install -r requirements.txt"
  functions = "netlify/functions"

[[redirects]]
  from = "/*"
  to = "/.netlify/functions/server"
  status = 200
```

Create a Netlify function:

```javascript
// netlify/functions/server.js
const { createServer } = require('http');
const { spawn } = require('child_process');
const serverless = require('serverless-http');

exports.handler = async (event, context) => {
  // Start Python MCP server as a child process
  const pythonProcess = spawn('python', ['server_http.py']);
  
  // Forward requests to the Python server
  // Implementation details here
  
  return {
    statusCode: 200,
    body: JSON.stringify({ message: "MCP Server running" })
  };
};
```

## Custom Import Feature for MCP Servers

To add the ability to import MCP servers from GitHub URLs, you can implement this feature:

```javascript
// import_server.js
import fetch from 'node-fetch';
import { exec } from 'child_process';
import fs from 'fs/promises';
import path from 'path';

// Function to import MCP server from GitHub URL
async function importMcpServerFromGithub(url) {
  try {
    // Extract owner and repo from GitHub URL
    const match = url.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    if (!match) {
      throw new Error('Invalid GitHub URL');
    }
    
    const [_, owner, repo] = match;
    const tempDir = path.join(process.cwd(), 'temp', `${owner}-${repo}`);
    
    // Create temp directory
    await fs.mkdir(tempDir, { recursive: true });
    
    // Clone repository
    console.log(`Cloning repository: ${url}`);
    await new Promise((resolve, reject) => {
      exec(`git clone ${url} ${tempDir}`, (error, stdout, stderr) => {
        if (error) {
          reject(error);
          return;
        }
        resolve(stdout);
      });
    });
    
    // Analyze repository contents
    const files = await fs.readdir(tempDir);
    
    // Detect server type (Node.js, Python, etc.)
    const hasPackageJson = files.includes('package.json');
    const hasPythonFiles = files.some(file => file.endsWith('.py'));
    
    // Generate Cursor configuration
    let cursorConfig = {
      name: repo,
      command: '',
      args: []
    };
    
    if (hasPackageJson) {
      cursorConfig.command = 'node';
      // Find main JavaScript file
      const packageJson = JSON.parse(await fs.readFile(path.join(tempDir, 'package.json'), 'utf8'));
      const mainFile = packageJson.main || 'index.js';
      cursorConfig.args = [path.join(tempDir, mainFile)];
    } else if (hasPythonFiles) {
      cursorConfig.command = 'python';
      // Find main Python file
      const mainFile = files.find(file => file === 'server.py' || file === 'main.py') || files.find(file => file.endsWith('.py'));
      cursorConfig.args = [path.join(tempDir, mainFile)];
    }
    
    // Return configuration for Cursor
    return {
      success: true,
      config: cursorConfig,
      repositoryPath: tempDir
    };
  } catch (error) {
    console.error('Error importing MCP server:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Example usage
const result = await importMcpServerFromGithub('https://github.com/kirill-markin/example-mcp-server');
console.log(result);

// Function to add the server to Cursor config
async function addToCursorConfig(serverConfig) {
  // Determine OS and config file location
  const isWindows = process.platform === 'win32';
  const isMac = process.platform === 'darwin';
  
  let configPath;
  if (isMac) {
    configPath = path.join(process.env.HOME, 'Library/Application Support/Cursor/cursor_config.json');
  } else if (isWindows) {
    configPath = path.join(process.env.APPDATA, 'Cursor', 'cursor_config.json');
  } else {
    configPath = path.join(process.env.HOME, '.config/Cursor/cursor_config.json');
  }
  
  try {
    // Read existing config or create new one
    let config = {};
    try {
      const configData = await fs.readFile(configPath, 'utf8');
      config = JSON.parse(configData);
    } catch (error) {
      // Config file doesn't exist or is invalid
    }
    
    // Initialize mcpServers object if it doesn't exist
    if (!config.mcpServers) {
      config.mcpServers = {};
    }
    
    // Add new server configuration
    config.mcpServers[serverConfig.name] = {
      command: serverConfig.command,
      args: serverConfig.args
    };
    
    // Write updated config
    await fs.writeFile(configPath, JSON.stringify(config, null, 2), 'utf8');
    
    return {
      success: true,
      message: `MCP server '${serverConfig.name}' added to Cursor configuration`
    };
  } catch (error) {
    return {
      success: false,
      error: `Failed to update Cursor configuration: ${error.message}`
    };
  }
}
```

## Complete Express Server Implementation for MCP Builder

Here's a complete Express server implementation that can be used for a web-based MCP Builder with GitHub import functionality:

```javascript
// server.js
import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import { exec } from 'child_process';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// API endpoint to import MCP server from GitHub
app.post('/api/import-server', async (req, res) => {
  const { url } = req.body;
  
  if (!url) {
    return res.status(400).json({ success: false, error: 'GitHub URL is required' });
  }
  
  try {
    // Implementation similar to importMcpServerFromGithub function above
    // ...
    
    return res.json({ success: true, config: cursorConfig });
  } catch (error) {
    return res.status(500).json({ success: false, error: error.message });
  }
});

// API endpoint to generate MCP server code
app.post('/api/generate-server', async (req, res) => {
  const { serverName, serverType, tools } = req.body;
  
  if (!serverName || !serverType || !tools) {
    return res.status(400).json({ success: false, error: 'Missing required fields' });
  }
  
  try {
    // Generate server code based on type and tools
    let serverCode = '';
    
    if (serverType === 'nodejs') {
      serverCode = generateNodeJsServer(serverName, tools);
    } else if (serverType === 'python') {
      serverCode = generatePythonServer(serverName, tools);
    } else {
      return res.status(400).json({ success: false, error: 'Unsupported server type' });
    }
    
    // Generate ZIP file with server code
    const zipPath = await generateZipFile(serverName, serverType, serverCode, tools);
    
    return res.json({ success: true, zipPath });
  } catch (error) {
    return res.status(500).json({ success: false, error: error.message });
  }
});

// Helper functions
function generateNodeJsServer(serverName, tools) {
  // Generate Node.js server code based on tools
  // ...
}

function generatePythonServer(serverName, tools) {
  // Generate Python server code based on tools
  // ...
}

async function generateZipFile(serverName, serverType, serverCode, tools) {
  // Generate ZIP file with server code
  // ...
}

app.listen(PORT, () => {
  console.log(`MCP Builder server running on port ${PORT}`);
});
```

This comprehensive guide provides all the code needed to implement MCP server deployment for Cursor IDE and various cloud platforms, including the GitHub import functionality shown in the screenshot. The examples cover Node.js, Python, and TypeScript implementations, along with deployment configurations for Vercel, Railway, Netlify, Fly.io, and Render.

Citations:
[1] https://pplx-res.cloudinary.com/image/upload/v1744570396/user_uploads/iIybZUPfzHsRlAl/image.jpg
[2] https://github.com/kirill-markin/example-mcp-server
[3] https://mcp.so/server/mcp-server-heroku
[4] https://dev.to/lovestaco/building-mcp-tools-and-running-them-in-cursor-editor-3ono
[5] https://apidog.com/blog/build-a-custom-mcp-server/
[6] https://dev.to/andyrewlee/use-your-own-mcp-on-cursor-in-5-minutes-1ag4
[7] https://github.com/getcursor/cursor/issues/2979
[8] https://www.reddit.com/r/learnprogramming/comments/1jbdn2r/how_to_install_mcp_tools_in_cursor_ide/
[9] https://www.reddit.com/r/cursor/comments/1jgplrg/oneclick_mcp_server_deployment/
[10] https://cursor.directory/mcp
[11] https://www.youtube.com/watch?v=XMVzT8X0QTA
[12] https://www.youtube.com/watch?v=rcjdfhhb6ZU
[13] https://news.ycombinator.com/item?id=43459240
[14] https://www.youtube.com/watch?v=3Jsh4brTjE0
[15] https://forum.cursor.com/t/how-to-use-mcp-server/50064
[16] https://composio.dev/blog/mcp-server-step-by-step-guide-to-building-from-scrtch/
[17] https://forum.cursor.com/t/mcp-install-config-and-management-suggestions/49283
[18] https://www.youtube.com/watch?v=oAoigBWLZgE
[19] https://www.reddit.com/r/mcp/comments/1jk5uga/deploying_websites_instantly_with_ai_cursor/

---
Answer from Perplexity: pplx.ai/share
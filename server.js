const express = require('express');\nconst bodyParser = require('body-parser');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst archiver = require('archiver');\nconst multer = require('multer');\nconst { v4: uuidv4 } = require('uuid');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Set up middleware\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(express.static('public'));\napp.set('view engine', 'ejs');\n\n// Set up file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = path.join(__dirname, 'uploads');\n    fs.ensureDirSync(uploadDir);\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    cb(null, `${Date.now()}-${file.originalname}`);\n  }\n});\nconst upload = multer({ storage });\n\n// Helper functions for creating MCP server templates\nconst templates = {\n  pythonTemplate: (serverName, tools) => {\n    return `\nfrom typing import Dict, List, Union, Optional, Any\nfrom mcp.server import MCPServer, Tool, Resources\n\n# Initialize the MCP server\nserver = MCPServer()\n\n# Define tools\n${tools.map(tool => `\n@server.tool()\nasync def ${tool.name.replace(/\\s+/g, '_').toLowerCase()}(${tool.parameters.map(p => p.name.replace(/\\s+/g, '_').toLowerCase() + ': ' + (p.type || 'str')).join(', ')}) -> Dict[str, Any]:\n    \"\"\"${tool.description}\"\"\"\n    # TODO: Implement tool functionality\n    return {\"result\": f\"${tool.name} executed with parameters: ${tool.parameters.map(p => '{' + p.name.replace(/\\s+/g, '_').toLowerCase() + '}').join(', ')}\"}\n`).join('\\n')}\n\n# Start the server\nif __name__ == \"__main__\":\n    server.start()\n`;\n  },\n  \n  typescriptTemplate: (serverName, tools) => {\n    return `\nimport { MCPServer, Tool } from '@modelcontextprotocol/mcp';\n\n// Initialize the MCP server\nconst server = new MCPServer();\n\n// Define tools\n${tools.map(tool => `\nserver.registerTool({\n  name: \"${tool.name.replace(/\\s+/g, '_').toLowerCase()}\",\n  description: \"${tool.description}\",\n  parameters: {\n    ${tool.parameters.map(p => `${p.name.replace(/\\s+/g, '_').toLowerCase()}: {\n      type: \"${p.type || 'string'}\",\n      description: \"${p.description}\"\n    }`).join(',\\n    ')}\n  },\n  handler: async ({${tool.parameters.map(p => p.name.replace(/\\s+/g, '_').toLowerCase()).join(', ')}}) => {\n    // TODO: Implement tool functionality\n    return {\n      result: \\`${tool.name} executed with parameters: ${tool.parameters.map(p => '\\${' + p.name.replace(/\\s+/g, '_').toLowerCase() + '}').join(', ')}\\`\n    };\n  }\n});\n`).join('\\n')}\n\n// Start the server\nserver.start().catch(error => {\n  console.error('Error starting server:', error);\n  process.exit(1);\n});\n`;\n  },\n  \n  readmeTemplate: (serverName, description) => {\n    return `\n# ${serverName} MCP Server\n\n${description}\n\n## Setup Instructions\n\n### Prerequisites\n- Node.js 18+ or Python 3.8+ (depending on the server type you chose)\n\n### Installation\n\n#### For TypeScript server:\n1. Install dependencies:\n   \\`\\`\\`\n   npm install\n   \\`\\`\\`\n2. Start the server:\n   \\`\\`\\`\n   npm start\n   \\`\\`\\`\n\n#### For Python server:\n1. Create a virtual environment:\n   \\`\\`\\`\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\\\Scripts\\\\activate\n   \\`\\`\\`\n2. Install dependencies:\n   \\`\\`\\`\n   pip install mcp-client-sdk\n   \\`\\`\\`\n3. Start the server:\n   \\`\\`\\`\n   python server.py\n   \\`\\`\\`\n\n### Connect to Claude Desktop\n\n1. Open Claude Desktop\n2. Go to settings and add a new MCP server\n3. Set the server type to \"command\"\n4. For the command, use:\n   - TypeScript: \\`node /path/to/server.js\\`\n   - Python: \\`python /path/to/server.py\\`\n5. Save and connect to your MCP server\n`;\n  },\n  \n  dockerfileTemplate: () => {\n    return `\n# Choose base image based on server type\nFROM node:18-slim\n\n# Set working directory\nWORKDIR /app\n\n# Copy package.json and install dependencies\nCOPY package*.json ./\nRUN npm install\n\n# Copy source code\nCOPY . .\n\n# Expose port if needed\n# EXPOSE 3000\n\n# Start the server\nCMD [\"node\", \"server.js\"]\n`;\n  },\n  \n  installScriptTemplate: (serverType) => {\n    if (serverType === 'python') {\n      return `\n#!/bin/bash\n# Installation script for Python MCP server\n\n# Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\nsource venv/bin/activate  # On Windows, use: venv\\\\Scripts\\\\activate\n\n# Install required dependencies\npip install mcp-client-sdk\n\necho \"Installation complete! To start the server:\"\necho \"1. Activate the virtual environment: source venv/bin/activate\"\necho \"2. Run the server: python server.py\"\n`;\n    } else {\n      return `\n#!/bin/bash\n# Installation script for TypeScript MCP server\n\n# Install dependencies\nnpm install\n\necho \"Installation complete! To start the server:\"\necho \"npm start\"\n`;\n    }\n  }\n};\n\n// Routes\napp.get('/', (req, res) => {\n  res.render('index');\n});\n\napp.get('/builder', (req, res) => {\n  res.render('builder');\n});\n\n// API to create and download MCP server\napp.post('/api/create-server', async (req, res) => {\n  try {\n    const { serverName, description, serverType, tools } = req.body;\n    \n    if (!serverName || !serverType || !tools || !Array.isArray(tools)) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n    \n    // Create a unique ID for this build\n    const buildId = uuidv4();\n    const buildDir = path.join(__dirname, 'builds', buildId);\n    fs.ensureDirSync(buildDir);\n    \n    // Generate server code\n    const serverCode = serverType === 'python' \n      ? templates.pythonTemplate(serverName, tools)\n      : templates.typescriptTemplate(serverName, tools);\n    \n    // Create main server file\n    const serverFilename = serverType === 'python' ? 'server.py' : 'server.js';\n    fs.writeFileSync(path.join(buildDir, serverFilename), serverCode);\n    \n    // Create package.json if TypeScript\n    if (serverType === 'typescript') {\n      const packageJson = {\n        name: serverName.toLowerCase().replace(/\\s+/g, '-'),\n        version: '1.0.0',\n        description,\n        main: 'server.js',\n        scripts: {\n          start: 'node server.js'\n        },\n        dependencies: {\n          '@modelcontextprotocol/mcp': '^0.4.0'\n        }\n      };\n      fs.writeFileSync(\n        path.join(buildDir, 'package.json'),\n        JSON.stringify(packageJson, null, 2)\n      );\n    }\n    \n    // Create README.md\n    fs.writeFileSync(\n      path.join(buildDir, 'README.md'),\n      templates.readmeTemplate(serverName, description)\n    );\n    \n    // Create Dockerfile\n    fs.writeFileSync(\n      path.join(buildDir, 'Dockerfile'),\n      templates.dockerfileTemplate()\n    );\n    \n    // Create install script\n    const installScript = templates.installScriptTemplate(serverType);\n    fs.writeFileSync(\n      path.join(buildDir, 'install.sh'),\n      installScript\n    );\n    fs.chmodSync(path.join(buildDir, 'install.sh'), '755');\n    \n    // Create zip file\n    const zipFilePath = path.join(__dirname, 'downloads', `${buildId}.zip`);\n    fs.ensureDirSync(path.dirname(zipFilePath));\n    \n    const output = fs.createWriteStream(zipFilePath);\n    const archive = archiver('zip', { zlib: { level: 9 } });\n    \n    archive.pipe(output);\n    archive.directory(buildDir, false);\n    \n    await new Promise((resolve, reject) => {\n      output.on('close', resolve);\n      archive.on('error', reject);\n      archive.finalize();\n    });\n    \n    res.json({\n      success: true,\n      downloadUrl: `/api/download/${buildId}`,\n      message: 'MCP server created successfully!'\n    });\n  } catch (error) {\n    console.error('Error creating server:', error);\n    res.status(500).json({ error: 'Failed to create MCP server' });\n  }\n});\n\n// API to download the created MCP server\napp.get('/api/download/:buildId', (req, res) => {\n  const { buildId } = req.params;\n  const zipFilePath = path.join(__dirname, 'downloads', `${buildId}.zip`);\n  \n  if (!fs.existsSync(zipFilePath)) {\n    return res.status(404).json({ error: 'Build not found' });\n  }\n  \n  res.download(zipFilePath);\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`MCP Server Builder running on http://localhost:${PORT}`);\n});